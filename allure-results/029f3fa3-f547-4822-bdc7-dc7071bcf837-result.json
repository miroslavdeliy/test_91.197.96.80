{"name": "Проверка времени загрузки главной страницы в Yandex Browser", "status": "failed", "statusDetails": {"message": "AssertionError: Главная страница загружалась слишком долго: 3589 мс\n  assert 3589 <= 3000\nassert False", "trace": "self = <test_performance.TestPerformance object at 0x000001CB9686F950>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38348a56a14526737d5eb8773013c428\")>\nbrowser_name = 'Yandex Browser'\n\n    @allure.title(\"Проверка времени загрузки главной страницы в\"\n                  \" {browser_name}\")\n    @allure.description(\"Проверка что время загрузки главной страницы \"\n                        \"не превышает допустимое\")\n    @pytest.mark.parametrize(\"browser_name\",\n                             [\"Mozilla Firefox\", \"Google Chrome\",\n                              \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_time_load(self, driver, browser_name):\n        allure.dynamic.parameter(\"Браузер\", browser_name)\n        with allure.step(\"Получение времени начала и окончания загрузки страницы\"):\n            # Выполняем JavaScript для получения времени загрузки\n            load_event_end = driver.execute_script(\n                    \"return window.performance.timing.loadEventEnd\")\n            navigation_start = driver.execute_script(\n                    \"return window.performance.timing.navigationStart\")\n            load_time_ms = load_event_end - navigation_start\n            allure.attach(str(load_time_ms), name=f\"Время загрузки\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(\"Проверка, что время загрузки не превышает допустимое\"):\n            try:\n>               assert load_time_ms <= MAX_LOAD_TIME_MS, \\\n                    f\"Главная страница загружалась слишком долго: {load_time_ms} мс\"\nE                   AssertionError: Главная страница загружалась слишком долго: 3589 мс\nE                   assert 3589 <= 3000\n\ntests\\test_performance.py:30: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_performance.TestPerformance object at 0x000001CB9686F950>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"38348a56a14526737d5eb8773013c428\")>\nbrowser_name = 'Yandex Browser'\n\n    @allure.title(\"Проверка времени загрузки главной страницы в\"\n                  \" {browser_name}\")\n    @allure.description(\"Проверка что время загрузки главной страницы \"\n                        \"не превышает допустимое\")\n    @pytest.mark.parametrize(\"browser_name\",\n                             [\"Mozilla Firefox\", \"Google Chrome\",\n                              \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_time_load(self, driver, browser_name):\n        allure.dynamic.parameter(\"Браузер\", browser_name)\n        with allure.step(\"Получение времени начала и окончания загрузки страницы\"):\n            # Выполняем JavaScript для получения времени загрузки\n            load_event_end = driver.execute_script(\n                    \"return window.performance.timing.loadEventEnd\")\n            navigation_start = driver.execute_script(\n                    \"return window.performance.timing.navigationStart\")\n            load_time_ms = load_event_end - navigation_start\n            allure.attach(str(load_time_ms), name=f\"Время загрузки\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n        with allure.step(\"Проверка, что время загрузки не превышает допустимое\"):\n            try:\n                assert load_time_ms <= MAX_LOAD_TIME_MS, \\\n                    f\"Главная страница загружалась слишком долго: {load_time_ms} мс\"\n            except AssertionError as e:\n                # В случае несовпадения - логирование ошибки\n                allure.attach(\n                    str(e),\n                    name=f\"Текст ошибки\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n                # Принудительное падение теста\n>               assert False, str(e)\nE               AssertionError: Главная страница загружалась слишком долго: 3589 мс\nE                 assert 3589 <= 3000\nE               assert False\n\ntests\\test_performance.py:40: AssertionError"}, "description": "Проверка что время загрузки главной страницы не превышает допустимое", "steps": [{"name": "Получение времени начала и окончания загрузки страницы", "status": "passed", "attachments": [{"name": "Время загрузки", "source": "2e53226d-2682-4875-9a36-290fbb20e445-attachment.txt", "type": "text/plain"}], "start": 1753784800407, "stop": 1753784800468}, {"name": "Проверка, что время загрузки не превышает допустимое", "status": "failed", "statusDetails": {"message": "AssertionError: Главная страница загружалась слишком долго: 3589 мс\n  assert 3589 <= 3000\nassert False\n", "trace": "  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\tests\\test_performance.py\", line 40, in test_time_load\n    assert False, str(e)\n"}, "attachments": [{"name": "Текст ошибки", "source": "ea7b4a5c-7f9e-4010-a077-81ab4d4c5793-attachment.txt", "type": "text/plain"}], "start": 1753784800468, "stop": 1753784800469}], "attachments": [{"name": "screenshot_on_failure", "source": "0b33c7c3-f171-4927-a2c2-7f5b1742b56c-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "e426ab49-94d8-4487-83b2-5018189aca1e-attachment.html", "type": "text/html"}], "parameters": [{"name": "browser_name", "value": "'Yandex Browser'"}, {"name": "Браузер", "value": "'Yandex Browser'"}], "start": 1753784800407, "stop": 1753784800473, "uuid": "973980dd-b9c8-4afa-afbb-e79f76b8b6ac", "historyId": "2a45a1c565606439925c489a445eb4f4", "testCaseId": "c63ec7b88875e3d2f511effbc8e752b2", "fullName": "tests.test_performance.TestPerformance#test_time_load", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_performance"}, {"name": "subSuite", "value": "TestPerformance"}, {"name": "host", "value": "Miroslav"}, {"name": "thread", "value": "10908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_performance"}]}