{"name": "Проверка корректности данных на странице подтверждения заказа в Google Chrome", "status": "failed", "statusDetails": {"message": "AssertionError: Адрес доставки некорректно отображается\nОжидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'", "trace": "actual = 'адрес доставки: иван', expected = 'адрес доставки: улица ленина, 34'\nmessage = 'Адрес доставки некорректно отображается'\n\n    def assert_text_equal(actual, expected, message=\"\"):\n        try:\n            # Сравнение текстовых значений\n>           assert actual in expected,\\\n                   ^^^^^^^^^^^^^^^^^^\n                f\"{message}\\nОжидалось: '{expected}', получено: '{actual}'\"\nE               AssertionError: Адрес доставки некорректно отображается\nE               Ожидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'\n\nhelpers\\assertions.py:26: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_registration_and_completion_order.TestRegistrationAndCompletionOrder object at 0x0000015B26D9FEE0>\nsubtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x0000015B24423E00>, suspend_capture_ctx=<bound met...e> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_correct_data_order_page[Google Chrome]>>)\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0126dbffe36f30a9fc3f36ede6068d49\")>\nuser_authorization = None, browser_name = 'Google Chrome'\n\n    @allure.title(\"Проверка корректности данных на странице подтверждения заказа\"\n                  \" в {browser_name}\")\n    @allure.description(\"Проверка, на странице подтверждения заказа данные \"\n                        \"товара и покупателя корректно отображаются\")\n    @pytest.mark.parametrize(\"browser_name\",\n                             [\"Mozilla Firefox\", \"Google Chrome\",\n                              \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_correct_data_order_page(self, subtests,\n                                     driver, user_authorization, browser_name):\n        with allure.step(\"Открытие страницы и иницилизация объектов\"):\n            shop = ShopPage(driver)\n            cart = CartPage(driver)\n            make_order = MakeOrderPage(driver)\n            finish_order = FinishOrderPage(driver)\n    \n        with allure.step(\"Переход в корзину\"):\n            shop.open_cart()\n    \n        with allure.step(\"Сохранить количество товара и общую сумму\"):\n            quantity_goods_in_cart = cart.get_product_1_quantity()\n            total_in_cart = cart.get_total()\n    \n        with allure.step(\"Нажать на кнопку 'Оформить заказ'\"):\n            cart.make_order()\n    \n        with allure.step(\"Заполнение личных данных\"):\n            make_order.send_name(TEST_USER_NAME)\n            make_order.send_first_name(TEST_USER_FIRST_NAME)\n            make_order.send_last_name(TEST_USER_LAST_NAME)\n            make_order.send_address(TEST_USER_ADDRESS)\n            make_order.send_card_number(TEST_USER_CARD)\n    \n        with allure.step(\"Нажать кнопку 'Оформить заказ'\"):\n            make_order.open_finish_order()\n    \n        with allure.step(\"Получаем данные со страницы подтверждения заказа\"):\n            actual_name_product = finish_order.get_finish_order_name_product().lower()\n            actual_name = finish_order.get_finish_order_name().lower()\n            actual_first_name = finish_order.get_finish_order_first_name().lower()\n            actual_finish_name = finish_order.get_finish_order_last_name().lower()\n            actual_address = finish_order.get_finish_order_address().lower()\n            actual_card = finish_order.get_finish_order_card_number().lower()\n            actual_quantity_goods = finish_order.get_finish_order_quantity_goods().lower()\n    \n        with allure.step(\"Проверка текстовых данных\"):\n            # Подготавливаем ожидаемые значения\n            expected_name_product = PRODUCT_1_NAME.lower()\n            expected_name = f\"имя: {TEST_USER_NAME}\".lower()\n            expected_first_name = f\"фамилия: {TEST_USER_FIRST_NAME}\".lower()\n            expected_finish_name = f\"отчество: {TEST_USER_LAST_NAME}\".lower()\n            expected_address = f\"адрес доставки: {TEST_USER_ADDRESS}\".lower()\n            expected_card = f\"номер карты: {TEST_USER_CARD}\".lower()\n            expected_quantity_goods = f\"количество товаров: {quantity_goods_in_cart}\"\n    \n            data = [\n                (\"Название товара\", actual_name_product, expected_name_product,\n                 assert_text_equal),\n                (\"Имя\", actual_name, expected_name, assert_text_equal),\n                (\"Фамилия\", actual_first_name, expected_first_name,\n                 assert_text_equal),\n                (\"Отчество\", actual_finish_name, expected_finish_name,\n                 assert_text_equal),\n                (\"Адрес доставки\", actual_address, expected_address,\n                 assert_text_equal),\n                (\"Номер карты\", actual_card, expected_card, assert_text_equal),\n                (\"Количество товаров\", actual_quantity_goods,\n                 expected_quantity_goods, assert_text_equal),\n            ]\n    \n            for label, actual, expected, custom_assert in data:\n                with allure.step(f\"Проверка {label}\"):\n                    with subtests.test(label=label):\n                        allure.attach(actual, name=f\"Фактическое значение\",\n                                        attachment_type=allure.attachment_type.TEXT)\n                        allure.attach(expected, name=f\"Ожидаемое значение\",\n                                        attachment_type=allure.attachment_type.TEXT)\n>                       custom_assert(actual, expected, f\"{label} некорректно отображается\")\n\ntests\\test_registration_and_completion_order.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'адрес доставки: иван', expected = 'адрес доставки: улица ленина, 34'\nmessage = 'Адрес доставки некорректно отображается'\n\n    def assert_text_equal(actual, expected, message=\"\"):\n        try:\n            # Сравнение текстовых значений\n            assert actual in expected,\\\n                f\"{message}\\nОжидалось: '{expected}', получено: '{actual}'\"\n        except AssertionError as e:\n            # В случае несовпадения - логирование ошибки\n            allure.attach(\n                str(e),\n                name=f\"Текст ошибки\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            # Принудительное падение теста\n>           assert False, str(e)\n                   ^^^^^\nE           AssertionError: Адрес доставки некорректно отображается\nE           Ожидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'\n\nhelpers\\assertions.py:36: AssertionError"}, "description": "Проверка, на странице подтверждения заказа данные товара и покупателя корректно отображаются", "steps": [{"name": "Открытие страницы и иницилизация объектов", "status": "passed", "start": 1753774040452, "stop": 1753774040452}, {"name": "Переход в корзину", "status": "passed", "start": 1753774040452, "stop": 1753774048964}, {"name": "Сохранить количество товара и общую сумму", "status": "passed", "start": 1753774048964, "stop": 1753774050683}, {"name": "Нажать на кнопку 'Оформить заказ'", "status": "passed", "start": 1753774050683, "stop": 1753774050921}, {"name": "Заполнение личных данных", "status": "passed", "start": 1753774050921, "stop": 1753774051810}, {"name": "Нажать кнопку 'Оформить заказ'", "status": "passed", "start": 1753774051810, "stop": 1753774051940}, {"name": "Получаем данные со страницы подтверждения заказа", "status": "passed", "start": 1753774051940, "stop": 1753774052168}, {"name": "Проверка текстовых данных", "status": "passed", "steps": [{"name": "Проверка Название товара", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "5db7c7b7-b47e-4d58-bffb-4ed18f86248e-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "34752f1b-50d1-4f70-a5e2-583b7533cd2d-attachment.txt", "type": "text/plain"}], "start": 1753774052168, "stop": 1753774052173}, {"name": "Проверка Имя", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "944f1365-51d7-4af7-961b-daf6eb3222d2-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "f9413365-84b4-4daa-af45-0bfe5b95696e-attachment.txt", "type": "text/plain"}], "start": 1753774052173, "stop": 1753774052179}, {"name": "Проверка Фамилия", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "02c0c602-d006-4e78-868b-267ae25586da-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "361cfa4b-62f3-41ea-95af-81b82eff943b-attachment.txt", "type": "text/plain"}], "start": 1753774052179, "stop": 1753774052184}, {"name": "Проверка Отчество", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "0ead2c10-afbf-4388-94d2-02c09e403a0b-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "8b919add-0d2a-40d6-ac1b-4ac74a328e28-attachment.txt", "type": "text/plain"}], "start": 1753774052184, "stop": 1753774052190}, {"name": "Проверка Адрес доставки", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "04c0330f-859c-4518-9773-8208b8ca90f7-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "489d402e-4034-47cb-b15a-81edddc55a33-attachment.txt", "type": "text/plain"}, {"name": "Текст ошибки", "source": "c41a2f5f-b14a-4ad2-8078-4fa3c7fe9238-attachment.txt", "type": "text/plain"}, {"name": "screenshot_on_failure", "source": "d09c2969-0952-49bb-a9b8-e814c3c63d99-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "8da17248-ea9a-42ec-a591-249191fca51b-attachment.html", "type": "text/html"}], "start": 1753774052190, "stop": 1753774052334}, {"name": "Проверка Номер карты", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "7abe9108-bd84-446e-b171-c6c153c1627c-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "bcb5764a-1853-4072-a7da-dbacbc8df37f-attachment.txt", "type": "text/plain"}, {"name": "Текст ошибки", "source": "e6c49e47-0330-4d62-a5b8-3bbfd88fd92b-attachment.txt", "type": "text/plain"}, {"name": "screenshot_on_failure", "source": "7bd8d19b-6779-4f8c-b8b4-e80e982393b1-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "b01c7f0c-2146-4ed3-826f-bc7328a14240-attachment.html", "type": "text/html"}], "start": 1753774052334, "stop": 1753774052469}, {"name": "Проверка Количество товаров", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "c402e166-2aa9-4e6c-ba8a-299de5c26d67-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "1614695f-eb11-4347-b376-690bf5c0686f-attachment.txt", "type": "text/plain"}], "start": 1753774052469, "stop": 1753774052475}], "start": 1753774052168, "stop": 1753774052475}, {"name": "Проверка итоговой суммы", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "8a16c416-0ec7-45af-bda5-614eb85526ee-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "2386d36c-14eb-4485-a00b-179217bc9c33-attachment.txt", "type": "text/plain"}], "start": 1753774052475, "stop": 1753774052511}], "parameters": [{"name": "browser_name", "value": "'Google Chrome'"}], "start": 1753774040452, "stop": 1753774052512, "uuid": "116a63cd-5b46-4673-9ffc-5875617da572", "historyId": "7c768301d7d99c77b15d77908b62d618", "testCaseId": "dea07fae15ea0279cb231d345d9d02b9", "fullName": "tests.test_registration_and_completion_order.TestRegistrationAndCompletionOrder#test_correct_data_order_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_and_completion_order"}, {"name": "subSuite", "value": "TestRegistrationAndCompletionOrder"}, {"name": "host", "value": "Miroslav"}, {"name": "thread", "value": "11788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_and_completion_order"}]}