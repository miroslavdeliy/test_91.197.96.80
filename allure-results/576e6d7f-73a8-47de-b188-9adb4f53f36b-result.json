{"name": "Проверка добавления товаров в корзину больше максимального в Mozilla Firefox", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_negative.TestNegative object at 0x000001FE1404DBD0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"8538449b-9ee7-40b5-be1c-9c53e0c1d8cf\")>\nuser_authorization = None, browser_name = 'Mozilla Firefox'\n\n    @allure.title(\"Проверка добавления товаров в корзину больше максимального\"\n                  \" в {browser_name}\")\n    @allure.description(\"Проверка добавления в корзину товаров больше \"\n                        \"максимального и что система не позволяет добавить больше\")\n    @pytest.mark.parametrize(\"browser_name\",\n                         [\"Mozilla Firefox\", \"Google Chrome\",\n                          \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_more_max_goods(self, driver, user_authorization,\n                            browser_name):\n        allure.dynamic.parameter(\"Браузер\", browser_name)\n        with allure.step(\"Открытие страницы и иницилизация объектов\"):\n            shop = ShopPage(driver)\n    \n        with allure.step(\"Добавление товаров в корзину больше максимального на 1\"):\n            for _ in range(MAX_QUANTITY + 1):\n>               shop.add_product_1()\n\ntests\\test_negative.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\shop_page.py:60: in add_product_1\n    self._wait_until(lambda d: int(d.find_element(*self.product_1_input).get_attribute(\"value\")) == value_before + 1)\nbase\\base_page.py:51: in _wait_until\n    return WebDriverWait(self.driver, timeout).until(condition)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8538449b-9ee7-40b5-be1c-9c53e0c1d8cf\")>, method = <function ShopPage.add_product_1.<locals>.<lambda> at 0x000001FE1408FA60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "description": "Проверка добавления в корзину товаров больше максимального и что система не позволяет добавить больше", "steps": [{"name": "Открытие страницы и иницилизация объектов", "status": "passed", "start": 1753780430776, "stop": 1753780430776}, {"name": "Добавление товаров в корзину больше максимального на 1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\tests\\test_negative.py\", line 27, in test_more_max_goods\n    shop.add_product_1()\n    ~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\pageobjects\\shop_page.py\", line 60, in add_product_1\n    self._wait_until(lambda d: int(d.find_element(*self.product_1_input).get_attribute(\"value\")) == value_before + 1)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\base\\base_page.py\", line 51, in _wait_until\n    return WebDriverWait(self.driver, timeout).until(condition)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1753780430776, "stop": 1753780462710}], "attachments": [{"name": "screenshot_on_failure", "source": "fe99c2b2-ebb8-40b1-b2b9-7798fc215815-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "e655bfe0-313f-4a16-b2a7-9037dd7c4541-attachment.html", "type": "text/html"}], "parameters": [{"name": "browser_name", "value": "'Mozilla Firefox'"}, {"name": "Браузер", "value": "'Mozilla Firefox'"}], "start": 1753780430776, "stop": 1753780462780, "uuid": "2d684235-0bf9-4ef0-a187-84318e39a6ab", "historyId": "37b5820c09875e91fa9225d90ef01fea", "testCaseId": "0ca059bc5c302985e0d317e60700118c", "fullName": "tests.test_negative.TestNegative#test_more_max_goods", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_negative"}, {"name": "subSuite", "value": "TestNegative"}, {"name": "host", "value": "Miroslav"}, {"name": "thread", "value": "9500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_negative"}]}