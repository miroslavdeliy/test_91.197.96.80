{"name": "Проверка корректности данных на странице подтверждения заказа в Google Chrome", "status": "failed", "statusDetails": {"message": "AssertionError: Адрес доставки некорректно отображается\nОжидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'", "trace": "actual = 'адрес доставки: иван', expected = 'адрес доставки: улица ленина, 34'\nmessage = 'Адрес доставки некорректно отображается'\n\n    def assert_text_equal(actual, expected, message=\"\"):\n        try:\n            # Сравнение текстовых значений\n>           assert actual in expected,\\\n                   ^^^^^^^^^^^^^^^^^^\n                f\"{message}\\nОжидалось: '{expected}', получено: '{actual}'\"\nE               AssertionError: Адрес доставки некорректно отображается\nE               Ожидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'\n\nhelpers\\assertions.py:26: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_registration_and_completion_order.TestRegistrationAndCompletionOrder object at 0x000001661254FBA0>\nsubtests = SubTests(ihook=<_pytest.config.compat.PathAwareHookProxy object at 0x000001660FB03E00>, suspend_capture_ctx=<bound met...e> _capture_fixture=None>>, request=<SubRequest 'subtests' for <Function test_correct_data_order_page[Google Chrome]>>)\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"934b11c7277b8162c1dd955cad010b40\")>\nuser_authorization = None, browser_name = 'Google Chrome'\n\n    @allure.title(\"Проверка корректности данных на странице подтверждения заказа\"\n                  \" в {browser_name}\")\n    @allure.description(\"Проверка, на странице подтверждения заказа данные \"\n                        \"товара и покупателя корректно отображаются\")\n    @pytest.mark.parametrize(\"browser_name\",\n                             [\"Mozilla Firefox\", \"Google Chrome\",\n                              \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_correct_data_order_page(self, subtests,\n                                     driver, user_authorization, browser_name):\n        with allure.step(\"Открытие страницы и иницилизация объектов\"):\n            shop = ShopPage(driver)\n            cart = CartPage(driver)\n            make_order = MakeOrderPage(driver)\n            finish_order = FinishOrderPage(driver)\n    \n        with allure.step(\"Переход в корзину\"):\n            shop.open_cart()\n    \n        with allure.step(\"Сохранить количество товара и общую сумму\"):\n            quantity_goods_in_cart = cart.get_product_1_quantity()\n            total_in_cart = cart.get_total()\n    \n        with allure.step(\"Нажать на кнопку 'Оформить заказ'\"):\n            cart.make_order()\n    \n        with allure.step(\"Заполнение личных данных\"):\n            make_order.send_name(TEST_USER_NAME)\n            make_order.send_first_name(TEST_USER_FIRST_NAME)\n            make_order.send_last_name(TEST_USER_LAST_NAME)\n            make_order.send_address(TEST_USER_ADDRESS)\n            make_order.send_card_number(TEST_USER_CARD)\n    \n        with allure.step(\"Нажать кнопку 'Оформить заказ'\"):\n            make_order.open_finish_order()\n    \n        with allure.step(\"Получаем данные со страницы подтверждения заказа\"):\n            actual_name_product = finish_order.get_finish_order_name_product().lower()\n            actual_name = finish_order.get_finish_order_name().lower()\n            actual_first_name = finish_order.get_finish_order_first_name().lower()\n            actual_finish_name = finish_order.get_finish_order_last_name().lower()\n            actual_address = finish_order.get_finish_order_address().lower()\n            actual_card = finish_order.get_finish_order_card_number().lower()\n            actual_quantity_goods = finish_order.get_finish_order_quantity_goods().lower()\n    \n        with allure.step(\"Проверка текстовых данных\"):\n            # Подготавливаем ожидаемые значения\n            expected_name_product = PRODUCT_1_NAME.lower()\n            expected_name = f\"имя: {TEST_USER_NAME}\".lower()\n            expected_first_name = f\"фамилия: {TEST_USER_FIRST_NAME}\".lower()\n            expected_finish_name = f\"отчество: {TEST_USER_LAST_NAME}\".lower()\n            expected_address = f\"адрес доставки: {TEST_USER_ADDRESS}\".lower()\n            expected_card = f\"номер карты: {TEST_USER_CARD}\".lower()\n            expected_quantity_goods = f\"количество товаров: {quantity_goods_in_cart}\"\n    \n            data = [\n                (\"Название товара\", actual_name_product, expected_name_product,\n                 assert_text_equal),\n                (\"Имя\", actual_name, expected_name, assert_text_equal),\n                (\"Фамилия\", actual_first_name, expected_first_name,\n                 assert_text_equal),\n                (\"Отчество\", actual_finish_name, expected_finish_name,\n                 assert_text_equal),\n                (\"Адрес доставки\", actual_address, expected_address,\n                 assert_text_equal),\n                (\"Номер карты\", actual_card, expected_card, assert_text_equal),\n                (\"Количество товаров\", actual_quantity_goods,\n                 expected_quantity_goods, assert_text_equal),\n            ]\n    \n            for label, actual, expected, custom_assert in data:\n                with allure.step(f\"Проверка {label}\"):\n                    with subtests.test(label=label):\n                        allure.attach(actual, name=f\"Фактическое значение\",\n                                        attachment_type=allure.attachment_type.TEXT)\n                        allure.attach(expected, name=f\"Ожидаемое значение\",\n                                        attachment_type=allure.attachment_type.TEXT)\n>                       custom_assert(actual, expected, f\"{label} некорректно отображается\")\n\ntests\\test_registration_and_completion_order.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'адрес доставки: иван', expected = 'адрес доставки: улица ленина, 34'\nmessage = 'Адрес доставки некорректно отображается'\n\n    def assert_text_equal(actual, expected, message=\"\"):\n        try:\n            # Сравнение текстовых значений\n            assert actual in expected,\\\n                f\"{message}\\nОжидалось: '{expected}', получено: '{actual}'\"\n        except AssertionError as e:\n            # В случае несовпадения - логирование ошибки\n            allure.attach(\n                str(e),\n                name=f\"Текст ошибки\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            # Принудительное падение теста\n>           assert False, str(e)\n                   ^^^^^\nE           AssertionError: Адрес доставки некорректно отображается\nE           Ожидалось: 'адрес доставки: улица ленина, 34', получено: 'адрес доставки: иван'\n\nhelpers\\assertions.py:36: AssertionError"}, "description": "Проверка, на странице подтверждения заказа данные товара и покупателя корректно отображаются", "steps": [{"name": "Открытие страницы и иницилизация объектов", "status": "passed", "start": 1753774759787, "stop": 1753774759787}, {"name": "Переход в корзину", "status": "passed", "start": 1753774759787, "stop": 1753774760858}, {"name": "Сохранить количество товара и общую сумму", "status": "passed", "start": 1753774760858, "stop": 1753774762212}, {"name": "Нажать на кнопку 'Оформить заказ'", "status": "passed", "start": 1753774762212, "stop": 1753774762634}, {"name": "Заполнение личных данных", "status": "passed", "start": 1753774762634, "stop": 1753774764286}, {"name": "Нажать кнопку 'Оформить заказ'", "status": "passed", "start": 1753774764286, "stop": 1753774764518}, {"name": "Получаем данные со страницы подтверждения заказа", "status": "passed", "start": 1753774764518, "stop": 1753774764943}, {"name": "Проверка текстовых данных", "status": "passed", "steps": [{"name": "Проверка Название товара", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "fe0510af-b2e7-4516-b6b4-85a372b14c20-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "23ad9122-b28a-4565-abb9-306071ee6efd-attachment.txt", "type": "text/plain"}], "start": 1753774764944, "stop": 1753774764952}, {"name": "Проверка Имя", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "c78e1868-f952-4bdf-bf83-e594ca0ef867-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "dfb260f1-b029-45ba-8e29-b1aa9802cbc5-attachment.txt", "type": "text/plain"}], "start": 1753774764952, "stop": 1753774764961}, {"name": "Проверка Фамилия", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "40163c60-1133-477c-a41d-2cd992ac27e2-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "dbdaddd8-8660-4e1e-88ff-87365c3d275c-attachment.txt", "type": "text/plain"}], "start": 1753774764961, "stop": 1753774764969}, {"name": "Проверка Отчество", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "7a7193ec-469a-4f47-a2d9-67724029c256-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "f73f9ec0-6fe5-416a-bb27-65d1e1a322f0-attachment.txt", "type": "text/plain"}], "start": 1753774764969, "stop": 1753774764979}, {"name": "Проверка Адрес доставки", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "e870ebca-8c30-4693-b223-a2ae7cd6092a-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "45df7b20-cbbb-4669-872d-27326c28ebfe-attachment.txt", "type": "text/plain"}, {"name": "Текст ошибки", "source": "0baa9ca5-90ba-4432-9215-5086cc433740-attachment.txt", "type": "text/plain"}, {"name": "screenshot_on_failure", "source": "5a687124-9288-44ed-b12c-9c9000797670-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "30c670a9-d3fd-48cc-a5e3-134e764a625c-attachment.html", "type": "text/html"}], "start": 1753774764979, "stop": 1753774765283}, {"name": "Проверка Номер карты", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "36d48510-1f58-451a-8ca2-885b62c3895c-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "4aac1812-d7e1-4d33-bc7f-780022fb14cc-attachment.txt", "type": "text/plain"}, {"name": "Текст ошибки", "source": "9d996ba6-7cb5-4fb5-94aa-d070bc83a9dd-attachment.txt", "type": "text/plain"}, {"name": "screenshot_on_failure", "source": "925dcbe5-79b2-4066-bf13-7cb61aa2d66d-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "1a4eebda-bf2b-4c31-af29-9f74466eddfc-attachment.html", "type": "text/html"}], "start": 1753774765283, "stop": 1753774765523}, {"name": "Проверка Количество товаров", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "59999a6d-409a-4e16-b2eb-df251f2dffae-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "e461c46b-037c-4bd0-afe8-8d2c1267ee46-attachment.txt", "type": "text/plain"}], "start": 1753774765523, "stop": 1753774765545}], "start": 1753774764944, "stop": 1753774765545}, {"name": "Проверка итоговой суммы", "status": "passed", "attachments": [{"name": "Фактическое значение", "source": "b1a206b4-d99e-4a6d-a90e-6c17b510a643-attachment.txt", "type": "text/plain"}, {"name": "Ожидаемое значение", "source": "0e6f2f55-3de1-40e0-a03b-2d2275563eb3-attachment.txt", "type": "text/plain"}], "start": 1753774765545, "stop": 1753774765723}], "parameters": [{"name": "browser_name", "value": "'Google Chrome'"}], "start": 1753774759787, "stop": 1753774765731, "uuid": "d338e3e1-e44b-444e-ba68-f70308f1e569", "historyId": "7c768301d7d99c77b15d77908b62d618", "testCaseId": "dea07fae15ea0279cb231d345d9d02b9", "fullName": "tests.test_registration_and_completion_order.TestRegistrationAndCompletionOrder#test_correct_data_order_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_and_completion_order"}, {"name": "subSuite", "value": "TestRegistrationAndCompletionOrder"}, {"name": "host", "value": "Miroslav"}, {"name": "thread", "value": "14416-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_and_completion_order"}]}