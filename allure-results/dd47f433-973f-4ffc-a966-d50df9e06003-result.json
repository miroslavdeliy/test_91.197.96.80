{"name": "Проверка добавления товаров в корзину на стоимость больше максимальной возможной в Mozilla Firefox", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nInvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\ndespatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20", "trace": "self = <test_negative.TestNegative object at 0x00000161ECFE43B0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"88e32f16-49dc-4536-92ee-4ea0228ddca8\")>\nuser_authorization = None, browser_name = 'Mozilla Firefox'\n\n    @allure.title(\"Проверка добавления товаров в корзину на стоимость \"\n                  \"больше максимальной возможной в {browser_name}\")\n    @allure.description(\"Проверка добавления в корзину товаров больше \"\n                        \"максимальной стоимость и что система не позволяет\"\n                        \" добавить больше\")\n    @pytest.mark.parametrize(\"browser_name\",\n                             [\"Mozilla Firefox\", \"Google Chrome\",\n                              \"Microsoft Edge\", \"Yandex Browser\"])\n    def test_more_max_total(self, driver, user_authorization,\n                            browser_name):\n        allure.dynamic.parameter(\"Браузер\", browser_name)\n        with allure.step(\"Открытие страницы и иницилизация объектов\"):\n            shop = ShopPage(driver)\n            cart = CartPage(driver)\n    \n        with allure.step(\"Перейти в корзину\"):\n            shop.open_cart()\n    \n        with allure.step(f\"Увеличивать количество товара, пока общая сумма не превысит {MAX_TOTAL}\"):\n            current_total = 0\n            while current_total <= MAX_TOTAL:\n>               cart.add_product_1()\n\ntests\\test_negative.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\cart_page.py:51: in add_product_1\n    value_before = int(self.get_product_1_quantity())\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npageobjects\\cart_page.py:39: in get_product_1_quantity\n    return self._get_attribute(self.product_1_input, \"value\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nbase\\base_page.py:38: in _get_attribute\n    element = wait_for_element(\nhelpers\\wait_for_element.py:14: in wait_for_element\n    return wait.until(condition_func((by, locator)))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000161ECFA7230>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"WebDriver session does not exist, or is no...ionette/server.sys.mjs:263:9\\\\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       InvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nE       assert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nE       assert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\nE       despatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nE       execute@chrome://remote/content/marionette/server.sys.mjs:289:16\nE       onPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nE       onPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\nE       _onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Проверка добавления в корзину товаров больше максимальной стоимость и что система не позволяет добавить больше", "steps": [{"name": "Открытие страницы и иницилизация объектов", "status": "passed", "start": 1753782209009, "stop": 1753782209009}, {"name": "Перейти в корзину", "status": "passed", "start": 1753782209009, "stop": 1753782209647}, {"name": "Увеличивать количество товара, пока общая сумма не превысит 100000", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nInvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\ndespatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\n", "trace": "  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\tests\\test_negative.py\", line 65, in test_more_max_total\n    cart.add_product_1()\n    ~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\pageobjects\\cart_page.py\", line 51, in add_product_1\n    value_before = int(self.get_product_1_quantity())\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\pageobjects\\cart_page.py\", line 39, in get_product_1_quantity\n    return self._get_attribute(self.product_1_input, \"value\")\n           ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\base\\base_page.py\", line 38, in _get_attribute\n    element = wait_for_element(\n        self.driver, *locator,\n        timeout=timeout or self.timeout,\n        condition=condition\n    )\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\helpers\\wait_for_element.py\", line 14, in wait_for_element\n    return wait.until(condition_func((by, locator)))\n           ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 224, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\miros\\PycharmProjects\\test_91.197.96.80\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1753782209647, "stop": 1753782225190}], "parameters": [{"name": "browser_name", "value": "'Mozilla Firefox'"}, {"name": "Браузер", "value": "'Mozilla Firefox'"}], "start": 1753782209008, "stop": 1753782225435, "uuid": "b90c0997-2095-4dc5-ac4a-a341257904a2", "historyId": "c46145196286a6467d9c727b36be9941", "testCaseId": "8286c6748e65693097ceaacc3ac0688b", "fullName": "tests.test_negative.TestNegative#test_more_max_total", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_negative"}, {"name": "subSuite", "value": "TestNegative"}, {"name": "host", "value": "Miroslav"}, {"name": "thread", "value": "9640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_negative"}]}